{"version":3,"sources":["../src/page.js"],"names":["wikiPage","get","rest","obj","first","firstValue","Object","keys","getFileName","Array","isArray","text","indexOf","split","name","apiOptions","prop","rvprop","rvlimit","rvparse","titles","raw","title","then","res","query","pages","pageid","revisions","rawContent","parseContent","explaintext","extract","generator","gimlimit","iiprop","map","id","node","content","attributes","some","key","value","className","nodeType","predicate","children","findNode","child","found","rvsection","rawInfo","wikitext","parser","general","info","length","toLowerCase","_wikitext","metadata","hasOwnProperty","rawPageInfo","assign","page","html","sections","summary","exintro","images","rawImages","image","imageinfo","reduce","imageInfos","list","url","references","inputHTML","tokens","ast","isTag","hasClass","refs","ref","hasName","cite","el","find","links","push","linkAttr","plnamespace","pllimit","limit","link","aggregated","_pagination","externalLinks","ellimit","extlinks","categories","category","coordinates","data","backlinks","bllimit","bltitle","mainImage","Promise","all","bildname","imagen","Immagine","badge","logo","mainImageName","sort","b","a","filename","toUpperCase","replace","langlinks","lllimit","llprop","lang","fullInfo","tables","canonicalurl"],"mappings":"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","file":"page.js","sourcesContent":["import { aggregatePagination, pagination, api, parseContent } from './util';\nimport infoboxParser from 'infobox-parser';\nimport { tokenize, constructTree } from 'hyntax';\nimport { parseCoordinates } from './coordinates';\n\nconst get = (obj, first, ...rest) => {\n\tif (obj === undefined || first === undefined) return obj;\n\tif (typeof first === 'function') {\n\t\treturn get(first(obj), ...rest);\n\t}\n\treturn get(obj[first], ...rest);\n};\n\nconst firstValue = obj => {\n\tif (typeof obj === 'object') return obj[Object.keys(obj)[0]];\n\treturn obj[0];\n};\n\nconst getFileName = text => {\n\tif (Array.isArray(text)) text = text[0];\n\tif (!text) return undefined;\n\tif (text.indexOf(':') !== -1) {\n\t\tconst [, name] = text.split(':');\n\t\treturn name;\n\t}\n\treturn text;\n};\n\n/**\n * WikiPage\n * @namespace WikiPage\n */\nexport default function wikiPage(rawPageInfo, apiOptions) {\n\tconst raw = rawPageInfo;\n\n\t/**\n\t * HTML from page\n\t * @example\n\t * wiki.page('batman').then(page => page.html()).then(console.log);\n\t * @method WikiPage#html\n\t * @return {Promise}\n\t */\n\tfunction html() {\n\t\treturn api(apiOptions, {\n\t\t\tprop: 'revisions',\n\t\t\trvprop: 'content',\n\t\t\trvlimit: 1,\n\t\t\trvparse: '',\n\t\t\ttitles: raw.title\n\t\t}).then(res => res.query.pages[raw.pageid].revisions[0]['*']);\n\t}\n\n\t/**\n\t * @summary Useful for extracting structured section content from the page\n\t * @alias sections\n\t * @example\n\t * wiki.page('batman').then(page => page.content()).then(console.log);\n\t * @method WikiPage#content\n\t * @return {Promise}\n\t */\n\tfunction content() {\n\t\treturn rawContent().then(parseContent);\n\t}\n\n\t/**\n\t * Raw content from page\n\t * @example\n\t * wiki.page('batman').then(page => page.rawContent()).then(console.log);\n\t * @method WikiPage#rawContent\n\t * @return {Promise}\n\t */\n\tfunction rawContent() {\n\t\treturn api(apiOptions, {\n\t\t\tprop: 'extracts',\n\t\t\texplaintext: '',\n\t\t\ttitles: raw.title\n\t\t}).then(res => res.query.pages[raw.pageid].extract);\n\t}\n\n\t/**\n\t * Text summary from page\n\t * @example\n\t * wiki.page('batman').then(page => page.summary()).then(console.log);\n\t * @method WikiPage#summary\n\t * @return {Promise}\n\t */\n\tfunction summary() {\n\t\treturn api(apiOptions, {\n\t\t\tprop: 'extracts',\n\t\t\texplaintext: '',\n\t\t\texintro: '',\n\t\t\ttitles: raw.title\n\t\t}).then(res => res.query.pages[raw.pageid].extract);\n\t}\n\n\t/**\n\t * Raw data from images from page\n\t * @example\n\t * wiki.page('batman').then(page => page.rawImages()).then(console.log);\n\t * @method WikiPage#rawImages\n\t * @return {Promise}\n\t */\n\tfunction rawImages() {\n\t\treturn api(apiOptions, {\n\t\t\tgenerator: 'images',\n\t\t\tgimlimit: 'max',\n\t\t\tprop: 'imageinfo',\n\t\t\tiiprop: 'url',\n\t\t\ttitles: raw.title\n\t\t}).then(res => {\n\t\t\tif (res.query) {\n\t\t\t\treturn Object.keys(res.query.pages).map(id => res.query.pages[id]);\n\t\t\t}\n\t\t\treturn [];\n\t\t});\n\t}\n\n\t/**\n\t * Main image URL from infobox on page\n\t * @example\n\t * wiki.page('batman').then(page => page.mainImage()).then(console.log);\n\t * @method WikiPage#mainImage\n\t * @return {Promise}\n\t */\n\tfunction mainImage() {\n\t\treturn Promise.all([rawImages(), info()]).then(([images, info]) => {\n\t\t\t// Handle different translations of \"image\" here\n\t\t\tconst mainImageName = getFileName(\n\t\t\t\tinfo.image ||\n\t\t\t\t\tinfo.bildname ||\n\t\t\t\t\tinfo.imagen ||\n\t\t\t\t\tinfo.Immagine ||\n\t\t\t\t\tinfo.badge ||\n\t\t\t\t\tinfo.logo\n\t\t\t);\n\t\t\t// Handle case where no info box exists\n\t\t\tif (!mainImageName) {\n\t\t\t\treturn rawInfo().then(text => {\n\t\t\t\t\tif (!images.length) return undefined;\n\t\t\t\t\t// Sort images by what is seen first in page's info text\n\t\t\t\t\timages.sort((a, b) => text.indexOf(b.title) - text.indexOf(a.title));\n\t\t\t\t\tconst image = images[0];\n\t\t\t\t\treturn image.imageinfo.length > 0\n\t\t\t\t\t\t? image.imageinfo[0].url\n\t\t\t\t\t\t: undefined;\n\t\t\t\t});\n\t\t\t}\n\t\t\tconst image = images.find(({ title }) => {\n\t\t\t\tconst filename = getFileName(title);\n\t\t\t\t// Some wikis use underscores for spaces, some don't\n\t\t\t\treturn (\n\t\t\t\t\tfilename.toUpperCase() === mainImageName.toUpperCase() ||\n\t\t\t\t\tfilename.replace(/\\s/g, '_') === mainImageName\n\t\t\t\t);\n\t\t\t});\n\t\t\treturn image && image.imageinfo.length > 0\n\t\t\t\t? image.imageinfo[0].url\n\t\t\t\t: undefined;\n\t\t});\n\t}\n\n\t/**\n\t * Image URL's from page\n\t * @example\n\t * wiki.page('batman').then(page => page.image()).then(console.log);\n\t * @method WikiPage#images\n\t * @return {Promise}\n\t */\n\tfunction images() {\n\t\treturn rawImages().then(images => {\n\t\t\treturn images\n\t\t\t\t.map(image => image.imageinfo)\n\t\t\t\t.reduce((imageInfos, list) => [...imageInfos, ...list], [])\n\t\t\t\t.map(info => info.url);\n\t\t});\n\t}\n\n\t/**\n\t * External links from page\n\t * @example\n\t * wiki.page('batman').then(page => page.externalLinks()).then(console.log);\n\t * @method WikiPage#externalLinks\n\t * @return {Promise}\n\t */\n\tfunction externalLinks() {\n\t\treturn api(apiOptions, {\n\t\t\tprop: 'extlinks',\n\t\t\tellimit: 'max',\n\t\t\ttitles: raw.title\n\t\t}).then(res =>\n\t\t\t(res.query.pages[raw.pageid].extlinks || []).map(link => link['*'])\n\t\t);\n\t}\n\n\tfunction hasClass(node, className) {\n\t\treturn (\n\t\t\tnode.content.attributes &&\n\t\t\tnode.content.attributes.some(\n\t\t\t\tattr =>\n\t\t\t\t\tattr.key.content === 'class' &&\n\t\t\t\t\tattr.value.content.indexOf(className) !== -1\n\t\t\t)\n\t\t);\n\t}\n\n\tfunction isTag(node) {\n\t\treturn node.nodeType === 'tag';\n\t}\n\n\tfunction hasName(node, name) {\n\t\treturn node.content.name === name;\n\t}\n\n\tfunction findNode(node, predicate) {\n\t\tif (predicate(node)) return node;\n\t\t// search through children as well\n\t\tif (node.content.children) {\n\t\t\tfor (let child of node.content.children) {\n\t\t\t\tconst found = findNode(child, predicate);\n\t\t\t\tif (found) {\n\t\t\t\t\treturn found;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * References from page\n\t * @example\n\t * wiki.page('batman').then(page => page.references()).then(console.log);\n\t * @method WikiPage#references\n\t * @return {Promise}\n\t */\n\tfunction references() {\n\t\treturn html()\n\t\t\t.then(inputHTML => {\n\t\t\t\tconst { tokens } = tokenize(inputHTML);\n\t\t\t\tconst { ast } = constructTree(tokens);\n\t\t\t\treturn ast;\n\t\t\t})\n\t\t\t.then(ast => {\n\t\t\t\tconst links = [];\n\t\t\t\tconst refs = findNode(\n\t\t\t\t\tast,\n\t\t\t\t\tnode => isTag(node) && hasClass(node, 'references')\n\t\t\t\t);\n\t\t\t\tif (refs) {\n\t\t\t\t\tfor (let ref of refs.content.children[0].content.children) {\n\t\t\t\t\t\tconst cite = findNode(\n\t\t\t\t\t\t\tref,\n\t\t\t\t\t\t\tnode => isTag(node) && hasName(node, 'cite')\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (cite) {\n\t\t\t\t\t\t\tfor (let el of cite.content.children) {\n\t\t\t\t\t\t\t\tif (isTag(el) && hasName(el, 'a') && hasClass(el, 'external')) {\n\t\t\t\t\t\t\t\t\tconst linkAttr = el.content.attributes.find(\n\t\t\t\t\t\t\t\t\t\tattr => attr.key.content === 'href'\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\tlinks.push(linkAttr.value.content);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn links;\n\t\t\t});\n\t}\n\n\t/**\n\t * Paginated links from page\n\t * @example\n\t * wiki.page('batman').then(page => page.links()).then(console.log);\n\t * @method WikiPage#links\n\t * @param  {Boolean} [aggregated] - return all links (default is true)\n\t * @param  {Number} [limit] - number of links per page\n\t * @return {Promise} - returns results if aggregated [and next function for more results if not aggregated]\n\t */\n\tfunction links(aggregated = true, limit = 100) {\n\t\tconst _pagination = pagination(\n\t\t\tapiOptions,\n\t\t\t{\n\t\t\t\tprop: 'links',\n\t\t\t\tplnamespace: 0,\n\t\t\t\tpllimit: limit,\n\t\t\t\ttitles: raw.title\n\t\t\t},\n\t\t\tres => (res.query.pages[raw.pageid].links || []).map(link => link.title)\n\t\t);\n\t\tif (aggregated) {\n\t\t\treturn aggregatePagination(_pagination);\n\t\t}\n\t\treturn _pagination;\n\t}\n\n\t/**\n\t * Paginated categories from page\n\t * @example\n\t * wiki.page('batman').then(page => page.categories()).then(console.log);\n\t * @method WikiPage#categories\n\t * @param  {Boolean} [aggregated] - return all categories (default is true)\n\t * @param  {Number} [limit] - number of categories per page\n\t * @return {Promise} - returns results if aggregated [and next function for more results if not aggregated]\n\t */\n\tfunction categories(aggregated = true, limit = 100) {\n\t\tconst _pagination = pagination(\n\t\t\tapiOptions,\n\t\t\t{\n\t\t\t\tprop: 'categories',\n\t\t\t\tpllimit: limit,\n\t\t\t\ttitles: raw.title\n\t\t\t},\n\t\t\tres =>\n\t\t\t\t(res.query.pages[raw.pageid].categories || []).map(\n\t\t\t\t\tcategory => category.title\n\t\t\t\t)\n\t\t);\n\t\tif (aggregated) {\n\t\t\treturn aggregatePagination(_pagination);\n\t\t}\n\t\treturn _pagination;\n\t}\n\n\t/**\n\t * Geographical coordinates from page\n\t * @example\n\t * wiki().page('Texas').then(texas => texas.coordinates())\n\t * @method WikiPage#coordinates\n\t * @return {Promise}\n\t */\n\tfunction coordinates() {\n\t\treturn api(apiOptions, {\n\t\t\tprop: 'coordinates',\n\t\t\ttitles: raw.title\n\t\t}).then(res => {\n\t\t\tconst page = res.query.pages[raw.pageid];\n\t\t\tif (page.coordinates) {\n\t\t\t\treturn page.coordinates[0];\n\t\t\t}\n\t\t\t// No coordinates for this page, check infobox for deprecated version\n\t\t\treturn info().then(data => parseCoordinates(data));\n\t\t});\n\t}\n\n\tfunction rawInfo(title) {\n\t\treturn api(apiOptions, {\n\t\t\tprop: 'revisions',\n\t\t\trvprop: 'content',\n\t\t\trvsection: 0,\n\t\t\ttitles: title || raw.title\n\t\t}).then(res => get(res, 'query', 'pages', firstValue, 'revisions', 0, '*'));\n\t}\n\n\t/**\n\t * Fetch and parse tables within page\n\t * @method WikiPage#tables\n\t * @return {Promise} Resolves to a collection of tables\n\t */\n\tfunction tables() {\n\t\treturn api(apiOptions, {\n\t\t\tprop: 'revisions',\n\t\t\trvprop: 'content',\n\t\t\ttitles: raw.title\n\t\t})\n\t\t\t.then(res => get(res, 'query', 'pages', firstValue, 'revisions', 0, '*'))\n\t\t\t.then(wikitext => infoboxParser(wikitext, apiOptions.parser).tables);\n\t}\n\n\t/**\n\t * Get general information from page, with optional specifc property\n\t * @deprecated This method will be dropped and replaced with the `fullInfo` implementation in v5\n\t * @example\n\t * new Wiki().page('Batman').then(page => page.info('alter_ego'));\n\t * @method WikiPage#info\n\t * @param  {String} [key] - Information key. Falsy keys are ignored\n\t * @return {Promise} - info Object contains key/value pairs of infobox data, or specific value if key given\n\t */\n\tfunction info(key) {\n\t\treturn rawInfo()\n\t\t\t.then(wikitext => {\n\t\t\t\t// Use general data for now...\n\t\t\t\tconst info = infoboxParser(wikitext, apiOptions.parser).general;\n\t\t\t\tif (Object.keys(info).length === 0) {\n\t\t\t\t\t// If empty, check to see if this page has a templated infobox\n\t\t\t\t\treturn rawInfo(`Template:Infobox ${raw.title.toLowerCase()}`).then(\n\t\t\t\t\t\t_wikitext =>\n\t\t\t\t\t\t\tinfoboxParser(_wikitext || '', apiOptions.parser).general\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\treturn info;\n\t\t\t})\n\t\t\t.then(metadata => {\n\t\t\t\tif (!key) {\n\t\t\t\t\treturn metadata;\n\t\t\t\t}\n\t\t\t\tif (metadata.hasOwnProperty(key)) {\n\t\t\t\t\treturn metadata[key];\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\t/**\n\t * Get the full infobox data, parsed in a easy to use manner\n\t * @example\n\t * new Wiki().page('Batman').then(page => page.fullInfo()).then(info => info.general.aliases);\n\t * @method WikiPage#fullInfo\n\t * @return {Promise} - Parsed object of all infobox data\n\t */\n\tfunction fullInfo() {\n\t\treturn rawInfo().then(wikitext =>\n\t\t\tinfoboxParser(wikitext, apiOptions.parser)\n\t\t);\n\t}\n\n\t/**\n\t * Paginated backlinks from page\n\t * @method WikiPage#backlinks\n\t * @param  {Boolean} [aggregated] - return all backlinks (default is true)\n\t * @param  {Number} [limit] - number of backlinks per page\n\t * @return {Promise} - includes results [and next function for more results if not aggregated]\n\t */\n\tfunction backlinks(aggregated = true, limit = 100) {\n\t\tconst _pagination = pagination(\n\t\t\tapiOptions,\n\t\t\t{\n\t\t\t\tlist: 'backlinks',\n\t\t\t\tbllimit: limit,\n\t\t\t\tbltitle: raw.title\n\t\t\t},\n\t\t\tres => (res.query.backlinks || []).map(link => link.title)\n\t\t);\n\t\tif (aggregated) {\n\t\t\treturn aggregatePagination(_pagination);\n\t\t}\n\t\treturn _pagination;\n\t}\n\n\t/**\n\t * Get list of links to different translations\n\t * @method WikiPage#langlinks\n\t * @return {Promise} - includes link objects { lang, title, url }\n\t */\n\tfunction langlinks() {\n\t\treturn api(apiOptions, {\n\t\t\tprop: 'langlinks',\n\t\t\tlllimit: 'max',\n\t\t\tllprop: 'url',\n\t\t\ttitles: raw.title\n\t\t}).then(res =>\n\t\t\tres.query.pages[raw.pageid].langlinks.map(link => {\n\t\t\t\treturn {\n\t\t\t\t\tlang: link.lang,\n\t\t\t\t\ttitle: link['*'],\n\t\t\t\t\turl: link.url\n\t\t\t\t};\n\t\t\t})\n\t\t);\n\t}\n\n\t/**\n\t * Get URL for wiki page\n\t * @method WikiPage#url\n\t * @return {String}\n\t */\n\tfunction url() {\n\t\treturn raw.canonicalurl;\n\t}\n\n\tconst page = Object.assign({}, raw);\n\n\tObject.assign(page, {\n\t\traw,\n\t\thtml,\n\t\trawContent,\n\t\tcontent,\n\t\tsections: content,\n\t\tsummary,\n\t\timages,\n\t\treferences,\n\t\tlinks,\n\t\texternalLinks,\n\t\tcategories,\n\t\tcoordinates,\n\t\tinfo,\n\t\tbacklinks,\n\t\trawImages,\n\t\tmainImage,\n\t\tlanglinks,\n\t\trawInfo,\n\t\tfullInfo,\n\t\ttables,\n\t\turl\n\t});\n\n\treturn page;\n}\n"]}